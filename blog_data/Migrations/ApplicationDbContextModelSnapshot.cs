// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using blog_data;

#nullable disable

namespace blog_data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("blog_models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Category", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "General"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Technology"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Random"
                        });
                });

            modelBuilder.Entity("blog_models.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Post", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 2,
                            Content = "<p>Are you looking for something new to learn this year?  Then let me suggest <a href=\\\"http://www.typescriptlang.org/\\\">TypeScript</a> for development with Cloud Functions!</p><p>Not long ago, the Cloud Functions for Firebase team <a href=\\\"http://firebase.googleblog.com/2017/12/improve-productivity-with-typescript.html\\\">released an update</a> to the <a href=\\\"https://firebase.google.com/docs/cli/\\\">Firebase CLI</a> that makes it easy for you to write your functions in TypeScript, rather than JavaScript.  The Firebase team encourages you to consider switching to TypeScript, but I can imagine you might be reluctant to learn a new language, especially if you're already comfortable with JavaScript.  The great news is that TypeScript offers you a bunch of benefits that are easy to start using today.</p>",
                            TimeStamp = new DateTime(2023, 12, 16, 8, 45, 8, 62, DateTimeKind.Local).AddTicks(3783),
                            Title = "Why you should use TypeScript for writing Cloud Functions"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            Content = "<p>Securing your Firebase Realtime Database just got easier with our newest feature: <strong>query-based rules</strong>. Query-based rules allow you to limit access to a subset of data. Need to restrict a query to return a maximum of 10 records? Want to ensure users are only retrieving the first 20 records instead of the last 20? Want to let a user query for only their documents? Not a problem. Query-based rules has you covered. Query-based rules can even help you simplify your data structure. Read on to learn how!</p>",
                            TimeStamp = new DateTime(2023, 12, 16, 8, 45, 8, 62, DateTimeKind.Local).AddTicks(3797),
                            Title = "Introducing Query-based Security Rules"
                        });
                });

            modelBuilder.Entity("blog_models.Post", b =>
                {
                    b.HasOne("blog_models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });
#pragma warning restore 612, 618
        }
    }
}
